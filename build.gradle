apply plugin: 'java'
apply plugin: 'eclipse'

// Default task.
defaultTasks 'deploy'

// Configuration parameters.
group = 'com.rcs.ind'
version = 'master'
sourceCompatibility = 1.7
targetCompatibility = 1.7

ext {
	// Manifest extra parameters.
	projectName = 'Asiel Util'
	vendor = 'Rotterdam Community Solutions'
	buildNumber = 10
	jarName = 'asiel-util.jar'
	
	// Dependencies versions.
	jacksonVersion = '2.+'

	// Deploy destinations.
	deployTo = [
		'../asiel-services/lib', 
		'../../lr-sdks/liferay-plugins-sdk-6.2/portlets/asiel-portlet/docroot/WEB-INF/lib'
	]
}

// Dependencies.
dependencies {
	compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
	compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
	compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
	compile "org.slf4j:slf4j-api:1.+"
	compile "org.apache.commons:commons-lang3:3.+"

    testCompile 'junit:junit:4.+'
	testCompile "org.mockito:mockito-core:1.+"
	testCompile "org.unitils:unitils-core:3.+"
	testCompile "org.hamcrest:hamcrest-library:1.+"
}

repositories {
    mavenCentral()
}

// Jar name and Manifest data.
jar {
	def buildDate = new Date().format("MMMMM dd yyyy")
	
    archiveName = jarName
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),        
                   'Implementation-Title': projectName,
                   'Implementation-Version': "$project.version - $buildDate - build: $buildNumber",
                   'Implementation-Vendor': vendor
    }
}

// Deploy task: copy jar to destinations.
task deploy(dependsOn: 'build') << {
  deployTo.each { dest ->
    copy {
      from jar
      into dest
    }
  }
}

configure(deploy) {
	group = 'Deploy'
	description = 'Copies the generated jar into all the \'deployTo\' places.'
}

// Gradle Wrapper version.
task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

// Eclipse plugin config hacks: avoid compiling test classes (src/test) and ordinary classes (src/main) to the same build directory.
eclipse.classpath.file.withXml { xml ->
    xml.asNode().'**'.findAll { it.name() == 'classpathentry' && it.'@path'.startsWith("src/test/")}*.@output = "test-bin"
}

check.dependsOn.remove(test)